{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: {\n    userinfo: ''\n  }\n};\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: {}\n  },\n  name1: 'changeName',\n  initialState,\n  reducers: {\n    adduser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      /*         state.value.name = 'Kanan'\n              state.value.email = 'Jadhav' */\n      state.user = action.payload;\n    },\n    userlist: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value.userinfo = state.user;\n      // state.user = action.payload;\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  adduser,\n  userlist\n} = counterSlice.actions;\nexport const selectUser = state => state.user.user;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","userinfo","counterSlice","name","user","name1","reducers","adduser","state","action","payload","userlist","actions","selectUser","reducer"],"sources":["/Users/karan/Projects/Priyanka/ReactJs-Pro/Car-Service-Center/my-car/src/features/counter/counterSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: {\n    userinfo:'',\n  },\n}\n\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState : {\n    user:{\n   \n    },\n  },\n  name1: 'changeName',\n  initialState,\n\n\n  reducers: {\n    adduser: (state, action) => {\n        // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n        // doesn't actually mutate the state because it uses the Immer library,\n        // which detects changes to a \"draft state\" and produces a brand new\n        // immutable state based off those changes\n/*         state.value.name = 'Kanan'\n        state.value.email = 'Jadhav' */\n        state.user = action.payload;\n      },\n      userlist: (state) => {\n        // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n        // doesn't actually mutate the state because it uses the Immer library,\n        // which detects changes to a \"draft state\" and produces a brand new\n        // immutable state based off those changes\n         state.value.userinfo =  state.user\n       // state.user = action.payload;\n      },\n\n\n        \n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const {  adduser,userlist } = counterSlice.actions\n\nexport const selectUser = (state) => state.user.user;\n\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;IACLC,QAAQ,EAAC;EACX;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EACtCK,IAAI,EAAE,MAAM;EACZJ,YAAY,EAAG;IACbK,IAAI,EAAC,CAEL;EACF,CAAC;EACDC,KAAK,EAAE,YAAY;EACnBN,YAAY;EAGZO,QAAQ,EAAE;IACRC,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB;MACA;MACA;MACA;MACR;AACA;MACQD,KAAK,CAACJ,IAAI,GAAGK,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,QAAQ,EAAGH,KAAK,IAAK;MACnB;MACA;MACA;MACA;MACCA,KAAK,CAACR,KAAK,CAACC,QAAQ,GAAIO,KAAK,CAACJ,IAAI;MACpC;IACD;EAIJ;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAGG,OAAO;EAACI;AAAS,CAAC,GAAGT,YAAY,CAACU,OAAO;AAEzD,OAAO,MAAMC,UAAU,GAAIL,KAAK,IAAKA,KAAK,CAACJ,IAAI,CAACA,IAAI;AAEpD,eAAeF,YAAY,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}