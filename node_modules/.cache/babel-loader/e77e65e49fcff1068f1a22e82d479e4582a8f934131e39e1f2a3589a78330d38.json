{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: {\n    userinfo: '',\n    useridx: ''\n  }\n};\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: {}\n  },\n  name: 'userid',\n  initialState: {\n    userid: {}\n  },\n  name1: 'changeName',\n  initialState,\n  reducers: {\n    adduser: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.user = action.payload;\n    },\n    userlist: state => {\n      state.value.userinfo = state.user.lists;\n    },\n    adduserid: (state, action) => {\n      state.userid = action.payload;\n    },\n    adduseridget: state => {\n      state.value.useridx = state.userid;\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  adduser,\n  userlist,\n  adduserid,\n  adduseridget\n} = counterSlice.actions;\nexport const selectUser = state => state.user.user;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","userinfo","useridx","counterSlice","name","user","userid","name1","reducers","adduser","state","action","payload","userlist","lists","adduserid","adduseridget","actions","selectUser","reducer"],"sources":["/Users/karan/Projects/Priyanka/ReactJs-Pro/Car-Service-Center/my-car/src/features/counter/counterSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: {\n    userinfo:'',\n    useridx:'',\n  },\n}\n\nexport const counterSlice = createSlice({\n  name: 'user',\n  initialState : {\n    user:{\n   \n    },\n  },\n  name: 'userid',\n  initialState : {\n    userid:{\n   \n    },\n  },\n  name1: 'changeName',\n  initialState,\n\n\n  reducers: {\n    adduser: (state, action) => {\n        // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n        // doesn't actually mutate the state because it uses the Immer library,\n        // which detects changes to a \"draft state\" and produces a brand new\n        // immutable state based off those changes\n        state.user = action.payload;\n      },\n      userlist: (state) => {\n        state.value.userinfo =  state.user.lists\n     },\n\n      adduserid: (state, action) => {\n        state.userid = action.payload;\n      },\n\n      adduseridget: (state) => {\n        state.value.useridx =  state.userid\n       \n     }\n\n\n        \n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const {  adduser,userlist,adduserid,adduseridget} = counterSlice.actions\n\nexport const selectUser = (state) => state.user.user;\n\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;IACLC,QAAQ,EAAC,EAAE;IACXC,OAAO,EAAC;EACV;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGL,WAAW,CAAC;EACtCM,IAAI,EAAE,MAAM;EACZL,YAAY,EAAG;IACbM,IAAI,EAAC,CAEL;EACF,CAAC;EACDD,IAAI,EAAE,QAAQ;EACdL,YAAY,EAAG;IACbO,MAAM,EAAC,CAEP;EACF,CAAC;EACDC,KAAK,EAAE,YAAY;EACnBR,YAAY;EAGZS,QAAQ,EAAE;IACRC,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB;MACA;MACA;MACA;MACAD,KAAK,CAACL,IAAI,GAAGM,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,QAAQ,EAAGH,KAAK,IAAK;MACnBA,KAAK,CAACV,KAAK,CAACC,QAAQ,GAAIS,KAAK,CAACL,IAAI,CAACS,KAAK;IAC3C,CAAC;IAEAC,SAAS,EAAE,CAACL,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACJ,MAAM,GAAGK,MAAM,CAACC,OAAO;IAC/B,CAAC;IAEDI,YAAY,EAAGN,KAAK,IAAK;MACvBA,KAAK,CAACV,KAAK,CAACE,OAAO,GAAIQ,KAAK,CAACJ,MAAM;IAEtC;EAIH;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAGG,OAAO;EAACI,QAAQ;EAACE,SAAS;EAACC;AAAY,CAAC,GAAGb,YAAY,CAACc,OAAO;AAE/E,OAAO,MAAMC,UAAU,GAAIR,KAAK,IAAKA,KAAK,CAACL,IAAI,CAACA,IAAI;AAEpD,eAAeF,YAAY,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}